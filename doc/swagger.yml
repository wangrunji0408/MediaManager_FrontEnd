# WebAPI 描述文件

# 打开在线编辑器 https://editor.swagger.io/
# 把全文复制到左侧编辑器中

# Author: 王润基
# Created: 2017.10.15

swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "MediaManager"
  termsOfService: "http://47.94.142.165:8088/gitlab/PRJ1_PraiseTheSun/MediaManager"
  contact:
    email: "wangrunji0408@163.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8000"
basePath: "/"
tags:
- name: "user"
  description: "Operations about user"
- name: "group"
  description: "Operations about usergroup"
- name: "file"
  description: "Operations about file"
- name: "social"
  description: "Operations about social"
schemes:
- "http"
securityDefinitions:
  # Authorization: Token ...
  APIKeyHeader:
    type: apiKey
    in: header
    name: Authorization
  basicAuth:
    type: basic
security:
  - APIKeyHeader: []
  - basicAuth: []
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "管理员用户创建新用户"
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object (Ignore id)"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
    get:
      tags:
      - "user"
      summary: "Get user by query"
      description: "搜索用户"
      operationId: "getUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "User name regex"
        type: "string"
      - name: "group"
        in: "query"
        description: "User group id"
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /user/signup:
    post:
      tags:
      - "user"
      summary: "Signup user. Return a token."
      description: "游客自助注册用户"
      operationId: "signupUser"
      security: []
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "object"
          properties:
            username:
              type: "string"
            password:
              type: "string"
            email:
              type: "string"
            phone:
              type: "string"
      responses:
        default:
          description: "successful operation"
          schema:
            type: "string"
            description: "Token"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system. Return a token."
      description: ""
      operationId: "loginUser"
      security: []
      produces:
      - "application/xml"
      - "application/json"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "username"
        in: "formData"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
            description: "Token"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Get user by ID"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
    put:
      tags:
      - "user"
      summary: "Update user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the admin user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /user/{id}/avatar:
    get:
      tags:
      - "user"
      summary: "Get user avatar image"
      operationId: "getUserAvatar"
      produces:
      - "image/jpeg"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: file
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
    post:
      tags:
      - "user"
      summary: "Upload user avatar image"
      operationId: "uploadUserAvatar"
      produces:
      - "application/xml"
      - "application/json"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      - in: formData
        name: file
        type: file
        description: The image to upload.
      responses:
        200:
          description: "successful operation"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /user/{id}/password:
    post:
      tags:
      - "user"
      summary: "Change user password"
      operationId: "changeUserPassword"
      produces:
      - "application/xml"
      - "application/json"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      - name: "oldPassword"
        in: "formData"
        required: true
        type: "string"
      - name: "newPassword"
        in: "formData"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /group:
    post:
      tags:
      - "group"
      summary: "Create group"
      description: "管理员用户创建新用户组"
      operationId: "createUserGroup"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user group"
        required: true
        schema:
          $ref: "#/definitions/UserGroup"
      responses:
        200:
          description: "successful operation"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
    get:
      tags:
      - "group"
      summary: "Get all user groups"
      description: ""
      operationId: "getUserGroups"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserGroup"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /group/{id}:
    get:
      tags:
      - "group"
      summary: "Get group by id"
      description: ""
      operationId: "getUserGroupById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserGroup"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
    put:
      tags:
      - "group"
      summary: "Update group"
      operationId: "updateUserGroup"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated group object"
        required: true
        schema:
          $ref: "#/definitions/UserGroup"
      responses:
        200:
          description: "successful operation"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
    delete:
      tags:
      - "group"
      summary: "Delete user group"
      description: "删除用户组，同时删除组内用户的标记"
      operationId: "deleteUserGroup"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /file:
    post:
      tags:
      - "file"
      summary: "Create file or directory"
      description: "新建空白文件或文件夹"
      operationId: "createFile"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "object"
          properties:
            path:
              type: "string"
            name:
              type: "string"
            isDir:
              type: "boolean"
      responses:
        default:
          description: "successful operation"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
    get:
      tags:
      - "file"
      summary: "Get file infos by query"
      description: "Used for searching files"
      operationId: "getFiles"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "path"
        in: "query"
        description: "File path. Regex."
        type: "string"
        default: ".*"
      - name: "name"
        in: "query"
        description: "File name. Regex."
        type: "string"
        default: ".*"
      - name: "tags"
        in: "query"
        description: "File tags"
        type: "array"
        items:
          type: "string"
      # 暂时不实现排序和分页
      # - name: "orderby"
      #   in: "query"
      #   description: "Orderby = name / size / modifyDate"
      #   type: "string"
      #   enum:
      #   - "name"
      #   - "modifyDate"
      # - name: "order"
      #   in: "query"
      #   description: "ascending / descending"
      #   type: "string"
      #   enum:
      #   - "ascending"
      #   - "descending"
      #   default: "ascending"
      # - name: "page"
      #   in: "query"
      #   description: "Page number. Begin from 1."
      #   type: "integer"
      # - name: "pagesize"
      #   in: "query"
      #   description: "Page size. Default = 10."
      #   type: "integer"
      #   default: 10
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/File"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
    patch:
      tags:
      - "file"
      summary: "Do some commands on files."
      description:
        "这个接口用于对一些文件进行一些操作。\n
        对每个文件， id 属性外 \n
        通过提供对应属性的新值来指示进行哪些操作：\n
        * 重命名 name \n
        * 移动位置 path \n
        * 修改标签 tags \n\n
        后端需逐条判断是否有值，是否变化，然后进行操作。对其它属性的修改均无效。\n
        若全部操作成功，则返回200。否则返回400，描述每个失败操作。"
      operationId: "updateFiles"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Updated file object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/File"
      responses:
        200:
          description: "successful operation"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /file/{id}:
    get:
      tags:
      - "file"
      summary: "Get file info by Id"
      description: "Used for searching files"
      operationId: "getFileById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        description: "File id"
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/File"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
    delete:
      tags:
      - "file"
      summary: "Delete file or directory"
      description: ""
      operationId: "deleteFile"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        description: "File id"
        type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /file/upload:
    post:
      tags:
      - "file"
      summary: "Upload file"
      description: "上传文件"
      operationId: "uploadFile"
      produces:
      - "application/xml"
      - "application/json"
      consumes:
      - "multipart/form-data"
      parameters:
      - in: formData
        name: file
        type: file
        description: The file to upload.
      - in: formData
        name: path
        type: string
        description: Base path
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/File"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /file/download/{id}:
    get:
      tags:
      - "file"
      summary: "Download file"
      operationId: "downloadFile"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        description: "File id"
        type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /comment:
    get:
      tags:
      - "social"
      summary: "Get all comments about the file"
      operationId: "getFileComments"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "fileID"
        in: "query"
        required: true
        description: "File id"
        type: "string"
      - name: "type"
        in: "query"
        description: "Comment type"
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Comment'
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
    post:
      tags:
      - "social"
      summary: "Post new comment about the file"
      operationId: "postComment"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: '#/definitions/Comment'
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Comment'
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /comment/{id}:
    delete:
      tags:
      - "social"
      summary: "Delete the comment"
      operationId: "deleteComment"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        description: "Comment id"
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /user/{id}/follower:
    get:
      tags:
      - "social"
      summary: "Get all followers of the user"
      operationId: "getUserFollower"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "integer"
              format: "int64"
              description: "UserIDs"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /user/{id}/following:
    get:
      tags:
      - "social"
      summary: "Get all followings of the user"
      operationId: "getUserFollowing"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "integer"
              format: "int64"
              description: "UserIDs"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /user/{id}/following/{othersID}:
    post:
      tags:
      - "social"
      summary: "Follow another user"
      operationId: "followUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      - name: "othersID"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
    delete:
      tags:
      - "social"
      summary: "Unfollow another user"
      operationId: "unfollowUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      - name: "othersID"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'
  /event:
    get:
      tags:
      - "social"
      summary: "Get all events of the user after a given time"
      operationId: "getUserEvents"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userID"
        in: "query"
        required: true
        type: "integer"
      - name: "afterTime"
        in: "query"
        type: "string"
        format: "date-time"
        description: "Use last login time for default."
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Event'
        400:
          description: "error"
          schema:
            $ref: '#/definitions/ErrorInfo'

definitions:
  File:
    type: "object"
    properties:
      id:
        type: "string"
      ownerID:
        type: "integer"
        format: "int64"
      isDir:
        type: "boolean"
      name:
        type: "string"
        description: "文件名"
      path:
        type: "string"
        description: "文件绝对路径，不含文件名"
      url:
        type: "string"
        description: "Download link"
      md5:
        type: "string"
      thumbnails:
        type: "string"
        description: "image url"
      size:
        type: "integer"
        format: "int32"
        description: "in bytes"
      modifyDate:
        type: "string"
        format: "date-time"
      createDate:
        type: "string"
        format: "date-time"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/FileTag"
    xml:
      name: "File"
  UserGroup:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      color:
        type: "string"
        format: "color"
        description: "like: #FF9900"
    xml:
      name: "UserGroup"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      password:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      image:
        type: "string"
        description: "头像图片地址"
      groups:
        type: "array"
        items:
          $ref: "#/definitions/UserGroup"
    xml:
      name: "User"
  FileTag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      color:
        type: "string"
        format: "color"
    xml:
      name: "FileTag"
  Comment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      fileID:
        type: "string"
      userID:
        type: "integer"
        format: "int64"
      date:
        type: "string"
        format: "date-time"
      type:
        type: "string"
        enum:
        - "star"
        - "score"
        - "comment"
      star:
        type: "boolean"
      score:
        type: "integer"
        description: "1-5"
      comment:
        type: "string"
    xml:
      name: "Comment"
  Event:
    type: "object"
    properties:
      date:
        type: "string"
        format: "date-time"
      content:
        type: "string"
        description: "For now, just describe events in plain string ..."
  ErrorInfo:
    type: "object"
    properties:
      info:
        type: "string"
    xml:
      name: "ErrorInfo"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
